// src/pages/intransit.jsx
import { useEffect, useState, useMemo } from "react";
import { supabase } from "../lib/supabase";
import { Loader2, Truck, AlertTriangle, CheckCheck, Search } from "lucide-react";

function StatusBadge({ status }) {
  const cls =
    {
      IN_TRANSIT: "bg-sky-500/15 text-sky-300 border-sky-500/30",
      PROBLEM: "bg-amber-500/15 text-amber-300 border-amber-500/30",
      DELIVERED: "bg-violet-500/15 text-violet-300 border-violet-500/30",
    }[status] || "bg-neutral-700/30 text-neutral-300 border-neutral-600/30";
  return (
    <span className={`inline-flex items-center px-2 py-0.5 rounded-lg text-xs border ${cls}`}>
      {status}
    </span>
  );
}

export default function InTransitPage() {
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [fetchError, setFetchError] = useState(null);
  const [q, setQ] = useState("");

  useEffect(() => {
    let cancelled = false;
    async function run() {
      setLoading(true);
      setFetchError(null);

      const { data, error } = await supabase
        .from("loads")
        .select("id,created_at,shipper,origin,destination,dispatcher,rate,status")
        .eq("status", "IN_TRANSIT")
        .order("created_at", { ascending: false });

      if (cancelled) return;
      if (error) {
        console.error("[InTransit] Supabase error:", error);
        setFetchError(error.message || "Failed to load data");
        setRows([]);
      } else {
        console.log("[InTransit] rows:", data);
        setRows(data || []);
      }
      setLoading(false);
    }
    run();
    return () => { cancelled = true; };
  }, []);

  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return rows;
    return rows.filter((r) =>
      [r.shipper, r.origin, r.destination, r.dispatcher]
        .filter(Boolean)
        .some((x) => String(x).toLowerCase().includes(s))
    );
  }, [rows, q]);

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-lg font-semibold">In Transit</h2>
        <div className="relative">
          <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-neutral-400" />
          <input
            value={q}
            onChange={(e) => setQ(e.target.value)}
            placeholder="Search shipper / origin / destination / dispatcher"
            className="pl-8 pr-3 py-2 rounded-lg bg-neutral-100 dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 text-sm outline-none focus:ring-2 focus:ring-sky-500/40"
          />
        </div>
      </div>

      {/* States */}
      {loading && (
        <div className="flex items-center gap-2 text-neutral-400">
          <Loader2 className="h-4 w-4 animate-spin" />
          Loading in-transit loads…
        </div>
      )}

      {fetchError && (
        <div className="flex items-center gap-2 text-amber-400">
          <AlertTriangle className="h-4 w-4" />
          {fetchError}
        </div>
      )}

      {!loading && !fetchError && filtered.length === 0 && (
        <div className="flex flex-col items-center justify-center gap-2 py-16 text-neutral-400">
          <Truck className="h-8 w-8" />
          <div className="text-sm">No loads currently in transit.</div>
          <div className="text-xs">Mark a load as <b>IN_TRANSIT</b> to see it here.</div>
        </div>
      )}

      {/* List */}
      {!loading && !fetchError && filtered.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3">
          {filtered.map((r) => (
            <div
              key={r.id}
              className="rounded-2xl border border-neutral-200 dark:border-neutral-800 bg-white/70 dark:bg-neutral-900/70 p-4"
            >
              <div className="flex items-center justify-between mb-2">
                <div className="font-medium">{r.shipper || "—"}</div>
                <StatusBadge status={r.status} />
              </div>
              <div className="text-sm text-neutral-400">
                <div><span className="text-neutral-500">Origin:</span> {r.origin || "—"}</div>
                <div><span className="text-neutral-500">Destination:</span> {r.destination || "—"}</div>
                <div><span className="text-neutral-500">Dispatcher:</span> {r.dispatcher || "—"}</div>
              </div>
              <div className="mt-3 flex items-center justify-between text-sm">
                <div className="text-neutral-400">
                  Rate: <span className="text-neutral-200">${r.rate ?? 0}</span>
                </div>
                <CheckCheck className="h-4 w-4 text-neutral-500" />
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

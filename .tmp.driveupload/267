// src/pages/drivers.jsx
import { useEffect, useState } from "react";
import { supabase } from "../lib/supabase";
import {
  PlusCircle,
  Search,
  Loader2,
  Phone,
  Mail,
  Truck,
  UserPlus,
  X,
  Check,
  Edit3,
  AlertTriangle,
} from "lucide-react";

const DRIVER_STATUSES = [
  "AVAILABLE",
  "ASSIGNED",
  "OFF",
  "ON_LEAVE",
  "SUSPENDED",
  "INACTIVE",
];

// ---------- STATUS BADGE ----------
function StatusBadge({ status }) {
  const styles =
    {
      AVAILABLE: "bg-emerald-500/15 text-emerald-300 border-emerald-500/30",
      ASSIGNED: "bg-sky-500/15 text-sky-300 border-sky-500/30",
      OFF: "bg-amber-500/15 text-amber-300 border-amber-500/30",
      ON_LEAVE: "bg-purple-500/15 text-purple-300 border-purple-500/30",
      SUSPENDED: "bg-red-500/15 text-red-300 border-red-500/30",
      INACTIVE: "bg-neutral-500/15 text-neutral-300 border-neutral-500/30",
    }[status] || "bg-neutral-700/30 text-neutral-300 border-neutral-600/30";

  return (
    <span
      className={`inline-flex items-center px-2 py-0.5 rounded-lg text-xs border ${styles}`}
    >
      {status}
    </span>
  );
}

// ---------- MAIN COMPONENT ----------
export default function DriversPage() {
  const [drivers, setDrivers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editing, setEditing] = useState(null); // holds driver being edited
  const [search, setSearch] = useState("");
  const [saving, setSaving] = useState(false);

  // -------- FETCH DRIVERS --------
  useEffect(() => {
    fetchDrivers();
  }, []);

  async function fetchDrivers() {
    setLoading(true);
    const { data, error } = await supabase
      .from("drivers")
      .select("*")
      .order("created_at", { ascending: false });
    if (error) console.error("Error loading drivers:", error);
    else setDrivers(data);
    setLoading(false);
  }

  // -------- UPDATE DRIVER --------
  async function handleUpdateDriver(e) {
    e.preventDefault();
    setSaving(true);
    const { error } = await supabase
      .from("drivers")
      .update({
        first_name: editing.first_name,
        last_name: editing.last_name,
        phone: editing.phone,
        email: editing.email,
        status: editing.status,
        notes: editing.notes,
      })
      .eq("id", editing.id);
    setSaving(false);

    if (error) {
      console.error("Error updating driver:", error);
      alert("Error updating driver.");
    } else {
      setEditing(null);
      fetchDrivers();
    }
  }

  // -------- FILTER & SEARCH --------
  const filteredDrivers = drivers.filter((d) => {
    const term = search.toLowerCase();
    return (
      d.first_name?.toLowerCase().includes(term) ||
      d.last_name?.toLowerCase().includes(term) ||
      d.phone?.includes(term) ||
      d.email?.toLowerCase().includes(term)
    );
  });

  return (
    <div className="space-y-6">
      {/* HEADER */}
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold">Drivers</h1>
        <button
          className="flex items-center gap-2 bg-emerald-600 hover:bg-emerald-500 text-white px-3 py-1.5 rounded-lg text-sm"
          onClick={() =>
            setEditing({
              id: null,
              first_name: "",
              last_name: "",
              phone: "",
              email: "",
              status: "AVAILABLE",
              notes: "",
            })
          }
        >
          <UserPlus size={16} />
          Add Driver
        </button>
      </div>

      {/* SEARCH BAR */}
      <div className="relative">
        <Search className="absolute left-3 top-2.5 h-4 w-4 text-neutral-400" />
        <input
          type="text"
          placeholder="Search drivers..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="pl-9 pr-3 py-2 bg-neutral-900/40 w-full rounded-lg border border-neutral-700 text-sm focus:outline-none focus:ring-1 focus:ring-emerald-500"
        />
      </div>

      {/* DRIVER LIST */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Loader2 className="animate-spin text-neutral-400" />
        </div>
      ) : filteredDrivers.length === 0 ? (
        <p className="text-neutral-500 text-sm">No drivers found.</p>
      ) : (
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredDrivers.map((driver) => (
            <div
              key={driver.id}
              className="border border-neutral-700 rounded-xl p-4 bg-neutral-900/40"
            >
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h2 className="font-semibold">
                    {driver.first_name} {driver.last_name}
                  </h2>
                  <StatusBadge status={driver.status} />
                </div>
                <button
                  onClick={() => setEditing(driver)}
                  className="text-neutral-400 hover:text-emerald-400"
                >
                  <Edit3 size={16} />
                </button>
              </div>

              <div className="space-y-1 text-sm text-neutral-300">
                {driver.phone && (
                  <p className="flex items-center gap-2">
                    <Phone size={14} /> {driver.phone}
                  </p>
                )}
                {driver.email && (
                  <p className="flex items-center gap-2">
                    <Mail size={14} /> {driver.email}
                  </p>
                )}
                {driver.truck_id && (
                  <p className="flex items-center gap-2">
                    <Truck size={14} /> Truck #{driver.truck_id}
                  </p>
                )}
                {driver.notes && (
                  <p className="text-xs text-neutral-400 italic mt-2">
                    {driver.notes}
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* EDIT MODAL */}
      {editing && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50">
          <form
            onSubmit={handleUpdateDriver}
            className="bg-neutral-900 p-6 rounded-2xl w-full max-w-md border border-neutral-700 space-y-4"
          >
            <div className="flex justify-between items-center mb-2">
              <h2 className="text-lg font-semibold">
                {editing.id ? "Edit Driver" : "Add Driver"}
              </h2>
              <button
                type="button"
                onClick={() => setEditing(null)}
                className="text-neutral-400 hover:text-neutral-200"
              >
                <X size={18} />
              </button>
            </div>

            <div className="grid grid-cols-2 gap-3">
              <input
                type="text"
                placeholder="First Name"
                value={editing.first_name}
                onChange={(e) =>
                  setEditing({ ...editing, first_name: e.target.value })
                }
                required
                className="px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
              />
              <input
                type="text"
                placeholder="Last Name"
                value={editing.last_name}
                onChange={(e) =>
                  setEditing({ ...editing, last_name: e.target.value })
                }
                required
                className="px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
              />
              <input
                type="text"
                placeholder="Phone"
                value={editing.phone}
                onChange={(e) =>
                  setEditing({ ...editing, phone: e.target.value })
                }
                className="px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
              />
              <input
                type="email"
                placeholder="Email"
                value={editing.email}
                onChange={(e) =>
                  setEditing({ ...editing, email: e.target.value })
                }
                className="px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
              />
            </div>

            <div>
              <label className="text-sm text-neutral-400">Status</label>
              <select
                value={editing.status}
                onChange={(e) =>
                  setEditing({ ...editing, status: e.target.value })
                }
                className="w-full mt-1 px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
              >
                {DRIVER_STATUSES.map((s) => (
                  <option key={s} value={s}>
                    {s}
                  </option>
                ))}
              </select>
            </div>

            <textarea
              placeholder="Notes"
              value={editing.notes || ""}
              onChange={(e) =>
                setEditing({ ...editing, notes: e.target.value })
              }
              rows={3}
              className="w-full px-3 py-2 bg-neutral-800 border border-neutral-700 rounded-lg text-sm"
            />

            <button
              type="submit"
              disabled={saving}
              className="w-full flex items-center justify-center gap-2 bg-emerald-600 hover:bg-emerald-500 text-white py-2 rounded-lg"
            >
              {saving ? <Loader2 className="animate-spin" size={16} /> : <Check size={16} />}
              {editing.id ? "Save Changes" : "Add Driver"}
            </button>
          </form>
        </div>
      )}
    </div>
  );
}
